diff --git a/kernel/hdegree.cc b/kernel/hdegree.cc
index 2e3053e..ed1e022 100644
--- a/kernel/hdegree.cc
+++ b/kernel/hdegree.cc
@@ -826,10 +826,10 @@ void scDegree(ideal S, intvec *modulweight, ideal Q)
   delete hseries2;
 }
 
-static void hDegree0(ideal S, ideal Q)
+static void hDegree0(ideal S, ideal Q, const ring r=currRing)
 {
   int  mc;
-  hexist = hInit(S, Q, &hNexist);
+  hexist = hInit(S, Q, &hNexist,r);
   if (!hNexist)
   {
     hMu = -1;
@@ -838,8 +838,8 @@ static void hDegree0(ideal S, ideal Q)
   else
     hMu = 0;
   hwork = (scfmon)omAlloc(hNexist * sizeof(scmon));
-  hvar = (varset)omAlloc((pVariables + 1) * sizeof(int));
-  hpur0 = (scmon)omAlloc((1 + (pVariables * pVariables)) * sizeof(int));
+  hvar = (varset)omAlloc((rVar(r) + 1) * sizeof(int));
+  hpur0 = (scmon)omAlloc((1 + (rVar(r) * rVar(r))) * sizeof(int));
   mc = hisModule;
   if (!mc)
   {
@@ -848,7 +848,7 @@ static void hDegree0(ideal S, ideal Q)
   }
   else
     hstc = (scfmon)omAlloc(hNexist * sizeof(scmon));
-  stcmem = hCreate(pVariables - 1);
+  stcmem = hCreate(rVar(r) - 1);
   loop
   {
     if (mc)
@@ -860,16 +860,16 @@ static void hDegree0(ideal S, ideal Q)
         break;
       }
     }
-    hNvar = pVariables;
+    hNvar = rVar(r);
     for (int i = hNvar; i; i--)
       hvar[i] = i;
     hStaircase(hstc, &hNstc, hvar, hNvar);
     hSupp(hstc, hNstc, hvar, &hNvar);
-    if ((hNvar == pVariables) && (hNstc >= pVariables))
+    if ((hNvar == rVar(r)) && (hNstc >= rVar(r)))
     {
       if ((hNvar > 2) && (hNstc > 10))
         hOrdSupp(hstc, hNstc, hvar, hNvar);
-      memset(hpur0, 0, (pVariables + 1) * sizeof(int));
+      memset(hpur0, 0, (rVar(r) + 1) * sizeof(int));
       hPure(hstc, 0, &hNstc, hvar, hNvar, hpur0, &hNpure);
       if (hNpure == hNvar)
       {
@@ -885,18 +885,18 @@ static void hDegree0(ideal S, ideal Q)
     if (mc <= 0 || hMu < 0)
       break;
   }
-  hKill(stcmem, pVariables - 1);
-  omFreeSize((ADDRESS)hpur0, (1 + (pVariables * pVariables)) * sizeof(int));
-  omFreeSize((ADDRESS)hvar, (pVariables + 1) * sizeof(int));
+  hKill(stcmem, rVar(r) - 1);
+  omFreeSize((ADDRESS)hpur0, (1 + (rVar(r) * rVar(r))) * sizeof(int));
+  omFreeSize((ADDRESS)hvar, (rVar(r) + 1) * sizeof(int));
   omFreeSize((ADDRESS)hwork, hNexist * sizeof(scmon));
   hDelete(hexist, hNexist);
   if (hisModule)
     omFreeSize((ADDRESS)hstc, hNexist * sizeof(scmon));
 }
 
-int  scMult0Int(ideal S, ideal Q)
+int  scMult0Int(ideal S, ideal Q, const ring r)
 {
-  hDegree0(S, Q);
+  hDegree0(S, Q,r);
   return hMu;
 }
 
diff --git a/kernel/kstd1.cc b/kernel/kstd1.cc
index 11e22dd..8ccd55b 100644
--- a/kernel/kstd1.cc
+++ b/kernel/kstd1.cc
@@ -1359,7 +1359,7 @@ ideal mora (ideal F, ideal Q,intvec *w,intvec *hilb,kStrategy strat)
     if (strat->kHEdgeFound)
     {
       if ((TEST_OPT_FINDET)
-      || ((TEST_OPT_MULTBOUND) && (scMult0Int((strat->Shdl)) < Kstd1_mu)))
+      || ((TEST_OPT_MULTBOUND) && (scMult0Int(strat->Shdl,NULL,strat->tailRing) < Kstd1_mu)))
       {
         // obachman: is this still used ???
         /*
diff --git a/kernel/stairc.h b/kernel/stairc.h
index f7b604d..3ae46f2 100644
--- a/kernel/stairc.h
+++ b/kernel/stairc.h
@@ -18,7 +18,7 @@ intvec * scIndIntvec(ideal S, ideal Q=NULL);
 lists scIndIndset(ideal S, BOOLEAN all, ideal Q=NULL);
 int scDimInt(ideal  s,ideal Q=NULL);
 int scMultInt(ideal  s,ideal Q=NULL);
-int scMult0Int(ideal  s,ideal Q=NULL);
+int scMult0Int(ideal  s,ideal Q=NULL, const ring r=currRing);
 void scPrintDegree(int co, int mu);
 void scDegree(ideal  s,intvec *modulweight,ideal Q=NULL);
 
